name: iOS Deploy

on:
  push:
    branches: [ develop, release/*, main ]
  workflow_dispatch:
    inputs:
      build_configuration:
        description: 'Which build configuration to use'
        required: false
        default: 'Debug'
        type: choice
        options:
        - Debug

jobs:
  build:
    name: Deploy build to TestFlight
    if: github.event.pull_request.draft == false
    runs-on: macos-13
    
    steps:
      - name: Add path globally
        run: echo "/usr/local/bin" >> $GITHUB_PATH

      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: 'true'
          
      - name: Check Dependencies
        uses: GetSidetrack/action-xcodeproj-spm-update@main
        with:
          workspace: "OneLogin.xcworkspace"
          scheme: "OneLogin"
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ secrets.GITHUBRUNNER_EC2_ACTIONS_ROLE_ARN }}
          role-duration-seconds: 1200
          role-skip-session-tagging: true
          
      - name: Store ENV from AWS SecretManager
        id: secrets
        uses: say8425/aws-secrets-manager-actions@v2
        with:
          AWS_DEFAULT_REGION: "eu-west-2"
          SECRET_NAME: "di-ipv-dca-mob-ios/github-actions-v2"

#      - name: Set Default Scheme
#        run: |
#          scheme_list=$(xcodebuild -list -json | tr -d "\n")
#          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
#          echo $default | cat >default
#          echo Using default scheme: $default

      - name: Deploy to App Store Connect
        if: github.event_name != 'workflow_dispatch'
        env:
          LC_ALL: "en_US.UTF-8"
          LANG: "en_US.UTF-8"
        run: |
          gitbranch=$(echo ${GITHUB_REF:-dev} | sed s/refs\\/heads\\///g)
          echo Pushed to branch: $gitbranch
          
          export GEM_HOME=$HOME/.gem
          export GEM_PATH=$HOME/.gem
          
          # Fixes issue with bundle install
          eval "$(rbenv init - zsh)"
          bundle install

          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/distribution.p12
          CERTIFICATE_PASSWORD="${{env.AWS_SECRET_SIGNING_KEY_PASSWORD}}"
          APIKEY_PATH=$RUNNER_TEMP/apikey.p8

          # import certificates from secrets
          echo -n "${{env.AWS_SECRET_DISTRIBUTION_P12_ENCODED}}" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "${{env.AWS_SECRET_AUTH_KEY_P8_ENCODED}}" | base64 --decode --output $APIKEY_PATH

          bundle exec fastlane run add_badge alpha:true
      
          bundle exec fastlane prerelease configuration:"Release" \
            certificate_path:$CERTIFICATE_PATH \
            certificate_password:$CERTIFICATE_PASSWORD \
            apikey_path:$APIKEY_PATH --verbose
          
      - name: Manual Deploy to App Store Connect
        if: github.event_name == 'workflow_dispatch'
        env:
          LC_ALL: "en_US.UTF-8"
          LANG: "en_US.UTF-8"
        run: |
          gitbranch=$(echo ${GITHUB_REF:-dev} | sed s/refs\\/heads\\///g)
          echo Pushed to branch: $gitbranch
            
          export GEM_HOME=$HOME/.gem
          export GEM_PATH=$HOME/.gem
            
          # Fixes issue with bundle install
          eval "$(rbenv init - zsh)"
          bundle install
          
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/distribution.p12
          CERTIFICATE_PASSWORD="${{env.AWS_SECRET_SIGNING_KEY_PASSWORD}}"
          APIKEY_PATH=$RUNNER_TEMP/apikey.p8
          
          # import certificates from secrets
          echo -n "${{env.AWS_SECRET_DISTRIBUTION_P12_ENCODED}}" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "${{env.AWS_SECRET_AUTH_KEY_P8_ENCODED}}" | base64 --decode --output $APIKEY_PATH
            
          bundle exec fastlane run add_badge alpha:true
      
          bundle exec fastlane prerelease configuration:${{ inputs.build_configuration }} \
            certificate_path:$CERTIFICATE_PATH \
            certificate_password:$CERTIFICATE_PASSWORD \
            apikey_path:$APIKEY_PATH --verbose
