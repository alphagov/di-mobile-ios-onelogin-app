name: iOS Deploy

on:
  push:
    branches: [ develop, release/*, main ]

permissions:
  id-token: write
  contents: read

jobs:
  run_swiftlint:
    name: Run Swiftlint
    runs-on: macos-14
    steps:
      - name: Add Path Globally
        run: echo "/usr/local/bin" >> $GITHUB_PATH

      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # pin@v4
        with:
          lfs: 'true'
          fetch-depth: 0

      - name: Lint
        run: |
          brew install swiftlint
          swiftlint --strict

  quality_report:
    needs: run_swiftlint
    name: Run Unit Tests and Send Coverage Report
    runs-on: macos-14

    steps:
      - name: Add Path Globally
        run: echo "/usr/local/bin" >> $GITHUB_PATH

      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # pin@v4
        with:
          lfs: 'true'
          fetch-depth: 0

      - name: Configure Private Repo Access
        env:
          GIT_TOKEN: ${{secrets.MODULE_FETCH_TOKEN}}
        run: |
          ./store-access-token.sh

      - name: Build App, Run Unit Tests and Send Coverage Report for Default Branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LC_ALL: "en_US.UTF-8"
          LANG: "en_US.UTF-8"
          GIT_CONFIG_NOSYSTEM: "true"
          GIT_CONFIG_GLOBAL: '${{ github.workspace }}/override-git-config'
        run: |
          brew install sonar-scanner

          bundle install

          bundle exec fastlane test scheme:"OneLogin" \
            sonar_token:${{secrets.SONAR_TOKEN}} \
            workspace:${{github.workspace}} \
            testplan:OneLoginUnit

  test_staging_config:
    needs: run_swiftlint
    name: Run Staging Configuration Tests
    runs-on: macos-14
    steps:
      - name: Add Path Globally
        run: echo "/usr/local/bin" >> $GITHUB_PATH

      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # pin@v4
        with:
          lfs: 'true'
          fetch-depth: 0

      - name: Configure Private Repo Access
        env:
          GIT_TOKEN: ${{secrets.MODULE_FETCH_TOKEN}}
        run: |
          ./store-access-token.sh

      - name: Build App, Run Staging Configuration Tests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LC_ALL: "en_US.UTF-8"
          LANG: "en_US.UTF-8"
          GIT_CONFIG_NOSYSTEM: "true"
          GIT_CONFIG_GLOBAL: '${{ github.workspace }}/override-git-config'
        run: |
          bundle install

          bundle exec fastlane testWithoutCoverage scheme:"OneLoginStaging" \
            testplan:OneLoginStaging

  test_build_config:
    needs: run_swiftlint
    name: Run Build Configuration Tests
    runs-on: macos-14
    steps:
      - name: Add Path Globally
        run: echo "/usr/local/bin" >> $GITHUB_PATH

      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # pin@v4
        with:
          lfs: 'true'
          fetch-depth: 0

      - name: Configure Private Repo Access
        env:
          GIT_TOKEN: ${{secrets.MODULE_FETCH_TOKEN}}
        run: |
          ./store-access-token.sh

      - name: Build App, Run Build Configuration Tests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LC_ALL: "en_US.UTF-8"
          LANG: "en_US.UTF-8"
          GIT_CONFIG_NOSYSTEM: "true"
          GIT_CONFIG_GLOBAL: '${{ github.workspace }}/override-git-config'
        run: |
          bundle install

          bundle exec fastlane testWithoutCoverage scheme:"OneLoginBuild" \
            testplan:OneLoginBuild

  test_ui:
    needs: run_swiftlint
    name: Run UI Tests
    runs-on: macos-14
    steps:
      - name: Add Path Globally
        run: echo "/usr/local/bin" >> $GITHUB_PATH

      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # pin@v4
        with:
          lfs: 'true'
          fetch-depth: 0

      - name: Configure Private Repo Access
        env:
          GIT_TOKEN: ${{secrets.MODULE_FETCH_TOKEN}}
        run: |
          ./store-access-token.sh

      - name: Build App, Run UI Tests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LC_ALL: "en_US.UTF-8"
          LANG: "en_US.UTF-8"
          GIT_CONFIG_NOSYSTEM: "true"
          GIT_CONFIG_GLOBAL: '${{ github.workspace }}/override-git-config'
        run: |
          bundle install

          bundle exec fastlane testWithoutCoverageForUITests scheme:"OneLoginBuild" \
            testplan:OneLoginUI

      - name: Make Artifact
        if: failure()
        run: |
          cd ./fastlane
          zip -rq UITestArtifact test_output -x "test_output/report.junit"

      - name: Upload Artifact
        if: failure()
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # pin@v4
        with:
          name: UITestArtifact
          path: ./fastlane/UITestArtifact.zip
          retention-days: 1
  test_pact:
    needs: run_swiftlint
    name: Run PACT tests and upload to broker
    runs-on: macos-14
    steps:
      - name: Add Path Globally
        run: echo "/usr/local/bin" >> $GITHUB_PATH

      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # pin@v4
        with:
          lfs: 'true'
          fetch-depth: 0

      - name: Configure Private Repo Access
        env:
          GIT_TOKEN: ${{secrets.MODULE_FETCH_TOKEN}}
        run: |
          ./store-access-token.sh

      - name: Install and start PACT broker
        run: |
          brew tap pact-foundation/pact-ruby-standalone
          brew install pact-ruby-standalone
          pact-mock-service start --pact-specification-version 2.0.0 --log "${{github.workspace}}/pact/pact.log" --pact-dir "${{github.workspace}}/pact/pacts" -p 1234
          
      - name: Build App, Run PACT tests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LC_ALL: "en_US.UTF-8"
          LANG: "en_US.UTF-8"
          GIT_CONFIG_NOSYSTEM: "true"
          GIT_CONFIG_GLOBAL: '${{ github.workspace }}/override-git-config'
        run: |
          bundle install
  
          bundle exec fastlane testWithoutCoverage scheme:"OneLoginBuild" \
            testplan:OneLoginPactTestPlan
        
      - name: Stop PACT mock service
        run: |
          pact-mock-service stop

      - name: Upload to PACT broker.
        env:
          PACT_BROKER_USERNAME_NP: ${{ secrets.PACT_BROKER_USERNAME_NP }}
          PACT_BROKER_PASSWORD_NP: ${{ secrets.PACT_BROKER_PASSWORD_NP }}
          PACT_BROKER_SOURCE_SECRET_NP: ${{ secrets.PACT_BROKER_SOURCE_SECRET_NP }}
          LC_ALL: "en_US.UTF-8"
          LANG: "en_US.UTF-8"
          GIT_CONFIG_NOSYSTEM: "true"
          GIT_CONFIG_GLOBAL: '${{ github.workspace }}/override-git-config'
        if: ${{ success() }}
        # The pact broker endpoint requires a query parameter to be accessed from outside the VPN.  However, the broker CLI will ignore this when passed as part of the "-b" parameter
        # By first executing a curl command to the broker endpoint, it allows subsequent connections and results can be published
        # The 3 second delay between the curl and pact-broker commands has been found to help mitigate 403 errors being returned from the pact-broker
        run: |
          response_code=$(curl -o /dev/null -w "%{http_code}\n" -u ${{env.PACT_BROKER_USERNAME_NP}}:${{env.PACT_BROKER_PASSWORD_NP}} "https://pactbroker-onelogin.staging.account.gov.uk/?testSource=${{env.PACT_BROKER_SOURCE_SECRET_NP}}")
          if [ $response_code -eq 200 ]; then
            sleep 3
            pact-broker publish ${{github.workspace}}/pact/pacts --consumer-app-version ${{github.sha}} --branch ${{github.head_ref}} -u=${{env.PACT_BROKER_USERNAME_NP}} -p=${{env.PACT_BROKER_PASSWORD_NP}} -b="https://pactbroker-onelogin.staging.account.gov.uk"
          else 
            echo $response_code
            echo "Login to pact broker failed, results not uploaded"
          fi
  
  deploy_apps:
    needs: [ test_staging_config, test_build_config, test_ui, test_pact, run_swiftlint ]
    name: Deploy Staging and Build Apps
    runs-on: macos-14
    steps:
      - name: Add Path Globally
        run: echo "/usr/local/bin" >> $GITHUB_PATH

      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # pin@v4
        with:
          lfs: 'true'

      - name: Configure Private Repo Access
        env:
          GIT_TOKEN: ${{secrets.MODULE_FETCH_TOKEN}}
        run: |
          ./store-access-token.sh

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # pin@v4.0.2
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ secrets.GITHUBRUNNER_EC2_ACTIONS_ROLE_ARN }}
          role-duration-seconds: 1200
          role-skip-session-tagging: true

      - name: Store Secrets from AWS SecretManager
        uses: aws-actions/aws-secretsmanager-get-secrets@98c2d6bf1dd67c2575fa2bb14294aa64103d426c # pin@v2.0.5
        with:
          secret-ids: |
            di-ipv-dca-mob-ios/github-actions-v2
          parse-json-secrets: true

      - name: Build App, Deploy to App Store Connect
        env:
          LC_ALL: "en_US.UTF-8"
          LANG: "en_US.UTF-8"
          GIT_CONFIG_NOSYSTEM: "true"
          GIT_CONFIG_GLOBAL: '${{ github.workspace }}/override-git-config'
        run: |
          gitbranch=$(echo ${GITHUB_REF:-dev} | sed s/refs\\/heads\\///g)
          echo Pushed to branch: $gitbranch

          bundle install

          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/distribution.p12
          CERTIFICATE_PASSWORD="${{env.DI_IPV_DCA_MOB_IOS_GITHUB_ACTIONS_V2_AWS_SECRET_SIGNING_KEY_PASSWORD}}"
          APIKEY_PATH=$RUNNER_TEMP/apikey.p8

          # import certificates from secrets
          echo -n "${{env.DI_IPV_DCA_MOB_IOS_GITHUB_ACTIONS_V2_AWS_SECRET_DISTRIBUTION_P12_ENCODED}}" \
            | base64 --decode -o $CERTIFICATE_PATH
          echo -n "${{env.DI_IPV_DCA_MOB_IOS_GITHUB_ACTIONS_V2_AWS_SECRET_AUTH_KEY_P8_ENCODED}}" \
            | base64 --decode -o $APIKEY_PATH

          bundle exec fastlane prerelease configuration:"Staging" \
            certificate_path:$CERTIFICATE_PATH \
            certificate_password:$CERTIFICATE_PASSWORD \
            apikey_path:$APIKEY_PATH --verbose

          bundle exec fastlane prerelease configuration:"Debug_Build" \
            certificate_path:$CERTIFICATE_PATH \
            certificate_password:$CERTIFICATE_PASSWORD \
            apikey_path:$APIKEY_PATH --verbose
